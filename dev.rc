#!/bin/bash

# Base directory to search for Git repositories
BASE_DIR="/workspace"
GIT_CONFIG_SRC="/tmp/.gitconfig"
GIT_CONFIG_PATH="$HOME/.gitconfig"
SSH_SRC="/tmp/.ssh"

# Set user IDs
if [ -z "${UID+x}" ]; then
  # Assign "id -u" to UID
  export UID=$(id -u)
fi

if [ -z "${GID+x}" ]; then
  # Assign "id -u" to UID
  export GID=$(id -g)
fi

# Function to commit and push changes to Git
commit_and_push() {
  if [ -z "$1" ]; then
    echo "What is the conventional type? Default is 'feat':"
    read commit_type

    if [ -z "$commit_type" ]; then
      commit_type="feat"
    fi

  case $commit_type in
      feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)
          ;;
      *)
          echo "Invalid type. Choose from (feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)."
          return 1
          ;;
  esac

    echo "Please enter a commit message:"
    read commit_message
  else
    commit_message="$1"
    echo "What is the conventional type? Default is 'feat':"
    read commit_type

    if [ -z "$commit_type" ]; then
      commit_type="feat"
    fi

    case $commit_type in
      feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)
        ;;
      *)
        echo "Invalid type. Choose from (feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)."
        return 1
        ;;
    esac
  fi

  if [ -z "$commit_message" ]; then
    echo "Commit message is required. Exiting."
          return 1
      fi

  # Get the absolute path of the top-level directory of the Git repository
  repo_path=$(git rev-parse --show-toplevel)

  # Extract the repository name from the path
  repo_name=$(basename "$repo_path")

  final_commit_message="$commit_type ($repo_name): $commit_message"

  # Function to commit and push changes in the current directory
  commit_push_current_dir() {
    local message="$1"
    git add . && git commit -m "$message"

    # Check if commit was successful
    if [ $? -ne 0 ]; then
      echo "Commit failed. Please check for errors."
      return 1
    fi

    git push

    # Check if push was successful
    if [ $? -ne 0 ]; then
      echo "Push failed. Please check for errors."
      return 1
    fi

    echo "Changes committed and pushed successfully in $(pwd)."
  }

  original_dir=$(pwd)
  dir_stack=()

  # Recursively commit and push changes up to the root
  while true; do
    commit_push_current_dir "$final_commit_message"
    superproject_dir=$(git rev-parse --show-superproject-working-tree)
    if [ -z "$superproject_dir" ]; then
      break
    fi
    dir_stack+=("$superproject_dir")
    cd "$superproject_dir"
  done

  # Walk back down to the original directory
  for dir in "${dir_stack[@]}"; do
    cd "$dir"
    if [ "$dir" == "$original_dir" ]; then
      # Get the relative path of the sub-module
      relative_path=$(realpath --relative-to="$(git rev-parse --show-toplevel)" "$dir")
      submodule_name=$(basename "$relative_path")
      commit_push_current_dir "sync: updated ${submodule_name} sub-module"
    else
      commit_push_current_dir "$final_commit_message"
    fi
  done

  cd "$original_dir"
}

# Update and push changes for the entire directory tree
update_all() {
  original_dir=$(pwd)
  dir_stack=()

  # Recursively update and push changes up to the root
  while true; do
    git pull --recurse-submodules
    superproject_dir=$(git rev-parse --show-superproject-working-tree)
    if [ -z "$superproject_dir" ]; then
      break
    fi
    dir_stack+=("$superproject_dir")
    cd "$superproject_dir"
  done

  # Walk back down to the original directory
  for dir in "${dir_stack[@]}"; do
    cd "$dir"
    git pull --recurse-submodules
  done

  cd "$original_dir"
}

# Recursively add all Git repositories in the base directory to the safe.directory list
trust_workspace() {
  # Check if both the base directory and the .gitconfig file exist
  if [ -d "$BASE_DIR" ] && [ -f "$GIT_CONFIG_SRC" ]; then
      # Copy the .gitconfig file to $HOME/.gitconfig
      rm -f "$GIT_CONFIG_PATH" && cp "$GIT_CONFIG_SRC" "$GIT_CONFIG_PATH"

      # Find all .git directories within the base directory
      find "$BASE_DIR" -type d -name ".git" | while read -r gitdir; do
          # Extract the repository path
          repo_dir=$(dirname "$gitdir")
          
          # Add the repository to the safe.directory list
          if git config --file "$GIT_CONFIG_PATH" --add safe.directory "$repo_dir"; then
              echo "Added $repo_dir to safe.directory in $GIT_CONFIG_PATH"
          else
              echo "Failed to add $repo_dir to safe.directory in $GIT_CONFIG_PATH" >&2
          fi
      done
  else
      if [ ! -d "$BASE_DIR" ]; then
          echo "Directory $BASE_DIR does not exist. Skipping safe.directory configuration."
      fi
      if [ ! -f "$GIT_CONFIG_PATH" ]; then
          echo "File $GIT_CONFIG_PATH does not exist. Skipping safe.directory configuration."
      fi
  fi
}

# Function to recursively push all Git repositories and submodules
push_all_repos() {
  find "$BASE_DIR" -type d -name ".git" | while read -r gitdir; do
    repo_dir=$(dirname "$gitdir")
    echo "Processing repository: $repo_dir"
    cd "$repo_dir"
    git add .
    git commit -m "Automated commit"
    git push --recurse-submodules=on-demand
  done
}

# Alias for trusting all Git repositories in the base directory
alias trust=trust_workspace

# Alias for easily committing across submodules
alias cap=commit_and_push

# Alias for updating the whole list of directories and submodules
alias cup=update_all

# Alias for pushing all Git repositories and submodules
alias pup=push_all_repos

# NPM shortcuts
alias ni="npm install"
alias nd="npm install -D"
alias generate="npm --prefix /workspace/api/src/database/ run drizzle-kit:generate"
alias migrate="npm --prefix /workspace/api/src/database/ run drizzle-kit:migrate"

# Environment shortcuts
alias rc-sync="cp /workspace/api/.devcontainer/.bashrc $HOME/.bashrc && source $HOME/.bashrc"
alias db-connect="psql -h postgres -p 5432 -U user -d co-maker"

# Function to display aliases in a table format
display_aliases() {
  echo -e "\nLoaded Aliases:"
  echo -e "----------------------------------------------"
  echo -e "Alias\t\tCommand"
  echo -e "----------------------------------------------"
  alias | awk -F'[ =]' '{cmd=""; for (i=3; i<=NF; i++) cmd=cmd $i " "; printf "%-15s %s\n", $2, cmd}'
  echo -e "----------------------------------------------\n"
}

# Define a custom cd function
j2d() {
    # Predefined paths
    local api="/workspace/api"
    local database="/workspace/api/src/database"
    local checkout="/workspace/apps/checkout"
    local workspace="/workspace"

    # Check the input argument
    case "$1" in
        api)
            command cd "$api" "${@:2}"  # Change to /workspace/api
            ;;
        checkout)
            command cd "$checkout" "${@:2}"  # Change to /workspace/apps/checkout
            ;;
        workspace)
            command cd "$workspace" "${@:2}"  # Change to /workspace
            ;;
        database)
            command cd "$database" "${@:2}"  # Change to /workspace/api/src/database
            ;;
        *)
            command cd "$@"  # Default behaviour
            ;;
    esac
}

# Custom completion function for j2d
_j2d_completion() {
    # Get existing directory completions, including absolute paths
    local existing_completions
    existing_completions=$(compgen -d)

    # Define your custom commands
    local commands="api checkout workspace database"

    # Combine existing completions with custom commands
    COMPREPLY=($(compgen -W "$commands $existing_completions" -- "${COMP_WORDS[1]}"))

    # Optionally sort the completions
    COMPREPLY=($(printf '%s\n' "${COMPREPLY[@]}" | sort -u))
}

# Register the completion function for j2d
complete -F _j2d_completion j2d

# Load contents of a .env file into the environment
load_env() {
  # Default to .env if no file is provided
  local file="${1:-.env}"

  # Check if the specified file exists
  if [ -f "$file" ]; then
    # Read each line in the file
    while IFS='=' read -r key value; do
      # Export the key-value pairs if the line is not empty and not a comment
      if [[ ! -z "$key" && "$key" != \#* ]]; then
        export "$key"="$value"
      fi
    done < "$file"
  else
    echo "File '$file' not found."
  fi
}

# Display the loaded aliases when the script is sourced
alias help=display_aliases
trust_workspace
load_env
